name: CI + CD

on:
  pull_request:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'release' && 'release' || github.ref }}
  # Don't continue building images for a PR if the PR is updated quickly
  # For other workflows, allow them to complete and just block on them. This
  # ensures deployments in particular to happen in series rather than parallel.
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env

      - name: Run pre-commit to lint files
        run: |
          pre-commit run --all-files

  build-images:
    name: Build images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        image:
          - api
          - ingestion_server
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Build image `${{ matrix.image }}`
        uses: docker/build-push-action@v2
        with:
          context: ${{ matrix.image }}
          push: false
          tags: openverse-${{ matrix.image }}
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }}
          outputs: type=docker,dest=/tmp/${{ matrix.image }}.tar

      - name: Upload image `${{ matrix.image }}`
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.image }}
          path: /tmp/${{ matrix.image }}.tar

  build-nginx:
    # This requires a separate job due to the dependency on the other image builds
    name: Build `nginx` Dockerfile target
    runs-on: ubuntu-latest
    needs:
      - build-images

    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load API and ingestion server images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: collectstatic
        run: just collectstatic

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      - name: Build image `nginx`
        uses: docker/build-push-action@v2
        with:
          context: api
          target: nginx
          push: false
          tags: openverse-api-nginx
          cache-from: type=gha,scope=nginx
          cache-to: type=gha,scope=nginx
          outputs: type=docker,dest=/tmp/api-nginx.tar

      - name: Upload image `api-nginx`
        uses: actions/upload-artifact@v2
        with:
          name: api-nginx
          path: /tmp/api-nginx.tar

  test-ing:
    name: Run tests for ingestion-server
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_nodejs: false

      - name: Install Python deps for ingestion-server
        run: |
          just _ing-install

      - name: Download image `ingestion_server`
        uses: actions/download-artifact@v2
        with:
          name: ingestion_server
          path: /tmp
      - name: Load image `ingestion_server`
        run: docker load --input /tmp/ingestion_server.tar

      - name: Run ingestion-server tests
        run: just ing-testlocal

      - name: Upload ingestion test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: ing_logs
          path: ingestion_server/test/ingestion_logs.txt

      - name: Print ingestion test logs
        if: always()
        run: cat ingestion_server/test/ingestion_logs.txt

  test-api:
    name: Run tests for the API
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Start API, ingest and index test data
        run: just init

      - name: Run API tests
        run: just api-test

      - name: Print API test logs
        if: always()
        run: |
          just logs > api_logs
          cat api_logs

      - name: Upload API test logs
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: api_logs
          path: api_logs

  test-frd:
    name: Run tests for the frontend
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false

      - name: Run unit tests
        run: just pnpm test:unit

  test-redoc:
    name: Check for API consumer docs smoke
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Test ReDoc site
        run: just api-doctest

  validate-openapi-spec:
    name: Validate Open API spec
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Run check
        run: just dj validateopenapischema

      - name: Upload schema on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: openverse-api-openapi-schema.yaml
          path: ./api/openapi.yaml

  test-storybook:
    name: Check for Storybook smoke
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false

      - name: Run Storybook smoke-test
        run: just pnpm storybook:smoke

  django-check:
    name: Run Django check
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Run check
        run: just dj check

  test_frd_build:
    name: Check Nuxt build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false

      - name: Run build
        run: just pnpm build

  check-migrations:
    name: Check for uncommited Django migrations
    runs-on: ubuntu-latest
    needs:
      - build-images
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false
          setup_nodejs: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Run makemigrations
        run: just dj makemigrations --check --noinput --merge

  push:
    name: Publish Docker images
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    needs:
      - test-ing
      - test-api
      - build-nginx
    permissions:
      packages: write
      contents: read
    strategy:
      matrix:
        image:
          - api
          - ingestion_server
          - api-nginx
    steps:
      - name: Log in to GitHub Docker Registry
        uses: docker/login-action@v1
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download image `${{ matrix.image }}`
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.image }}
          path: /tmp

      - name: Load and tag image `${{ matrix.image }}`
        run: |
          docker load --input /tmp/${{ matrix.image }}.tar
          docker tag openverse-${{ matrix.image }} \
            ghcr.io/wordpress/openverse-${{ matrix.image }}:latest
          docker tag openverse-${{ matrix.image }} \
            ghcr.io/wordpress/openverse-${{ matrix.image }}:${{ github.sha }}
          docker tag openverse-${{ matrix.image }} \
            ghcr.io/wordpress/openverse-${{ matrix.image }}:${{ github.ref_name }}
          docker push --all-tags ghcr.io/wordpress/openverse-${{ matrix.image }}

  docs-preview:
    name: Developer docs, Storybook, Tailwind config previews
    runs-on: ubuntu-latest
    # Check if the event is not triggered by a fork or dependabot
    # TODO: Change repo.owner.login to 'WordPress'
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.owner.login == 'dhruvkb' && github.actor != 'dependabot[bot]'
    needs:
      - build-images
    env:
      repo_owner: ${{ github.event.pull_request.head.repo.owner.login }}
      repo_name: ${{ github.event.pull_request.head.repo.name }}
    steps:
      - uses: peter-evans/find-comment@v2
        id: preview-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: Developer docs, Storybook, Tailwind config previews

      - uses: peter-evans/create-or-update-comment@v2
        if: steps.preview-comment.outputs.comment-id != 0
        with:
          comment-id: ${{ steps.preview-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **Developer docs, Storybook, Tailwind config previews**: _Updating_

            (This comment will be automatically updated with the preview URL once it is ready)

      - uses: peter-evans/create-or-update-comment@v2
        if: steps.preview-comment.outputs.comment-id == 0
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            **Developer docs, Storybook, Tailwind config previews**: _Updating_

            (This comment will be automatically updated with the preview URLs once it is ready)

      - uses: actions/checkout@v3

      - uses: ./.github/actions/setup-env
        with:
          setup_python: false

      - name: Download all images
        uses: actions/download-artifact@v2
        with:
          path: /tmp

      - name: Load all images
        run: |
          docker load --input /tmp/api/api.tar
          docker load --input /tmp/ingestion_server/ingestion_server.tar

      - name: Compile Sphinx
        run: |
          just sphinx-make
          sudo chown "$USER:$USER" -R ./api
          mv ./api/build/html /tmp/preview

      # Storybook will be available at `/storybook`
      - name: Build Storybook
        run: |
          just pnpm i18n
          just pnpm storybook:build

      # Tailwind will be available at `/tailwind`
      - name: Build Tailwind Config Viewer
        run: |
          just pnpm tcv:build

      - name: Merge Storybook and TCV
        run: |
          mv frontend/storybook-static /tmp/preview/storybook
          mv frontend/.tcv-export /tmp/preview/tailwind

      # Otherwise we end up with any extra stuff not git-ignored in the gh-pages branch
      - name: Recreate working directory to avoid superfluous files
        run: |
          cd ..
          sudo rm -rf "$repo_name"
          mkdir "$repo_name"

      - uses: actions/checkout@v3
        with:
          ref: gh-pages

      - name: Merge preview with existing gh-pages
        run: |
          cd ..
          cp -r "$repo_name" /tmp/gh-pages
          # trash the existing preview folder and replace it with the newly generated one
          # if the preview hasn't been pushed yet this will still exit(0)
          sudo rm -rf /tmp/gh-pages/_preview/${{ github.event.pull_request.number }}
          mv /tmp/preview /tmp/gh-pages/_preview/${{ github.event.pull_request.number }}
          cd "$repo_name"

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: /tmp/gh-pages
          force_orphan: true

      - uses: peter-evans/find-comment@v2
        id: final-preview-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: API Developer Docs Preview

      - uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.final-preview-comment.outputs.comment-id }}
          edit-mode: replace
          body: |
            **Developer docs, Storybook, Tailwind config previews**: _Ready_

            <https://${{ env.repo_owner }}.github.io/${{ env.repo_name }}/_preview/${{ github.event.pull_request.number }}>

            Please note that GitHub pages takes a little time to deploy newly pushed code, if the links above don't work or you see old versions, wait 5 minutes and try again.

            You can check [the GitHub pages deployment action list](https://github.com/${{ github.repository }}/actions/workflows/pages/pages-build-deployment) to see the current status of the deployments.

      - name: Checkout branch again to enable cleaning
        uses: actions/checkout@v3
        if: always()
